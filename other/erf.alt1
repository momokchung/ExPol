c
c
c     ###################################################
c     ##  COPYRIGHT (C)  2013  by  Jay William Ponder  ##
c     ##              All Rights Reserved              ##
c     ###################################################
c
c     ##############################################################
c     ##                                                          ##
c     ##  function erf  --  evaluate the standard error function  ##
c     ##                                                          ##
c     ##############################################################
c
c
c     "erf" computes a numerical value of the error function via
c     a rational function approximation
c
c     literature reference:
c
c     G. Marsaglia, "Evaluating the Normal Distribution", Journal
c     of Statistical Software, 11, 4 (2004)
c
c     adapted from an original algorithm and code by T. Oouda, and
c     available from http://www.kurims.kyoto-u.ac.jp/~ooura/
c
c
      function erf (x)
      implicit none
      integer i,k
      real*8 erf,x
      real*8 t,w,y
      real*8 a(0:64)
      real*8 b(0:64)
      data (a(i), i=0,12) / 
     &     0.00000000005958930743d0, -0.00000000113739022964d0, 
     &     0.00000001466005199839d0, -0.00000016350354461960d0, 
     &     0.00000164610044809620d0, -0.00001492559551950604d0, 
     &     0.00012055331122299265d0, -0.00085483269811296660d0, 
     &     0.00522397762482322257d0, -0.02686617064507733420d0, 
     &     0.11283791670954881569d0, -0.37612638903183748117d0, 
     &     1.12837916709551257377d0 / 
      data (a(i),i=13,25) / 
     &     0.00000000002372510631d0, -0.00000000045493253732d0, 
     &     0.00000000590362766598d0, -0.00000006642090827576d0, 
     &     0.00000067595634268133d0, -0.00000621188515924000d0, 
     &     0.00005103883009709690d0, -0.00037015410692956173d0, 
     &     0.00233307631218880978d0, -0.01254988477182192210d0, 
     &     0.05657061146827041994d0, -0.21379664776456006580d0, 
     &     0.84270079294971486929d0 / 
      data (a(i),i=26,38) / 
     &     0.00000000000949905026d0, -0.00000000018310229805d0, 
     &     0.00000000239463074000d0, -0.00000002721444369609d0, 
     &     0.00000028045522331686d0, -0.00000261830022482897d0, 
     &     0.00002195455056768781d0, -0.00016358986921372656d0, 
     &     0.00107052153564110318d0, -0.00608284718113590151d0, 
     &     0.02986978465246258244d0, -0.13055593046562267625d0, 
     &     0.67493323603965504676d0 / 
      data (a(i),i=39,51) / 
     &     0.00000000000382722073d0, -0.00000000007421598602d0, 
     &     0.00000000097930574080d0, -0.00000001126008898854d0, 
     &     0.00000011775134830784d0, -0.00000111992758382650d0, 
     &     0.00000962023443095201d0, -0.00007404402135070773d0, 
     &     0.00050689993654144881d0, -0.00307553051439272889d0, 
     &     0.01668977892553165586d0, -0.08548534594781312114d0, 
     &     0.56909076642393639985d0 / 
      data (a(i),i=52,64) / 
     &     0.00000000000155296588d0, -0.00000000003032205868d0, 
     &     0.00000000040424830707d0, -0.00000000471135111493d0, 
     &     0.00000005011915876293d0, -0.00000048722516178974d0, 
     &     0.00000430683284629395d0, -0.00003445026145385764d0, 
     &     0.00024879276133931664d0, -0.00162940941748079288d0, 
     &     0.00988786373932350462d0, -0.05962426839442303805d0, 
     &     0.49766113250947636708d0 / 
      data (b(i),i=0,12) / 
     &    -0.00000000029734388465d0,  0.00000000269776334046d0, 
     &    -0.00000000640788827665d0, -0.00000001667820132100d0, 
     &    -0.00000021854388148686d0,  0.00000266246030457984d0, 
     &     0.00001612722157047886d0, -0.00025616361025506629d0, 
     &     0.00015380842432375365d0,  0.00815533022524927908d0, 
     &    -0.01402283663896319337d0, -0.19746892495383021487d0, 
     &     0.71511720328842845913d0 / 
      data (b(i),i=13,25) / 
     &    -0.00000000001951073787d0, -0.00000000032302692214d0, 
     &     0.00000000522461866919d0,  0.00000000342940918551d0, 
     &    -0.00000035772874310272d0,  0.00000019999935792654d0, 
     &     0.00002687044575042908d0, -0.00011843240273775776d0, 
     &    -0.00080991728956032271d0,  0.00661062970502241174d0, 
     &     0.00909530922354827295d0, -0.20160072778491013140d0, 
     &     0.51169696718727644908d0 / 
      data (b(i),i=26,38) / 
     &     0.00000000003147682272d0, -0.00000000048465972408d0, 
     &     0.00000000063675740242d0,  0.00000003377623323271d0, 
     &    -0.00000015451139637086d0, -0.00000203340624738438d0, 
     &     0.00001947204525295057d0,  0.00002854147231653228d0, 
     &    -0.00101565063152200272d0,  0.00271187003520095655d0, 
     &     0.02328095035422810727d0, -0.16725021123116877197d0, 
     &     0.32490054966649436974d0 / 
      data (b(i),i=39,51) / 
     &     0.00000000002319363370d0, -0.00000000006303206648d0, 
     &    -0.00000000264888267434d0,  0.00000002050708040581d0, 
     &     0.00000011371857327578d0, -0.00000211211337219663d0, 
     &     0.00000368797328322935d0,  0.00009823686253424796d0, 
     &    -0.00065860243990455368d0, -0.00075285814895230877d0, 
     &     0.02585434424202960464d0, -0.11637092784486193258d0, 
     &     0.18267336775296612024d0 / 
      data (b(i),i=52,64) / 
     &    -0.00000000000367789363d0,  0.00000000020876046746d0, 
     &    -0.00000000193319027226d0, -0.00000000435953392472d0, 
     &     0.00000018006992266137d0, -0.00000078441223763969d0, 
     &    -0.00000675407647949153d0,  0.00008428418334440096d0, 
     &    -0.00017604388937031815d0, -0.00239729611435071610d0, 
     &     0.02064129023876022970d0, -0.06905562880005864105d0, 
     &     0.09084526782065478489d0 /
c
c
c     calculate an erf value across different input ranges
c
      w = abs(x)
      if (w .lt. 2.2d0) then
          t = w * w
          k = int(t)
          t = t - k
          k = 13 * k
          y = ((((((((((((a(k)*t+a(k+1))*t+a(k+2))*t+a(k+3))*t+a(k+4))
     &           *t+a(k+5))*t+a(k+6))*t+a(k+7))*t+a(k+8))*t+a(k+9))
     &           *t+a(k+10))*t+a(k+11))*t+a(k+12)) * w
      else if (w .lt. 6.9d0) then
          k = int(w)
          t = w - k
          k = 13 * (k-2)
          y = (((((((((((b(k)*t+b(k+1))*t+b(k+2))*t+b(k+3))*t+b(k+4))
     &           *t+b(k+5))*t+b(k+6))*t+b(k+7))*t+b(k+8))*t+b(k+9))
     &           *t+b(k+10))*t+b(k+11))*t+b(k+12)
          y = y * y
          y = y * y
          y = y * y
          y = 1.0d0 - y*y
      else
          y = 1.0d0
      end if
      if (x .lt. 0.0d0)  y = -y
      erf = y
      return
      end
c
c
c     ################################################################
c     ##                                                            ##
c     ##  function erfc  --  evaluate complementary error function  ##
c     ##                                                            ##
c     ################################################################
c
c
c     "erfc" computes a numerical value of the complementary error
c     function via a rational function approximation
c
c     literature reference:
c
c     G. Marsaglia, "Evaluating the Normal Distribution", Journal
c     of Statistical Software, 11, 4 (2004)
c
c     adapted from an original algorithm and code by T. Oouda, and
c     available from http://www.kurims.kyoto-u.ac.jp/~ooura/
c
c
      function erfc (x)
      implicit none
      real*8 pa,p0,p1,p2
      real*8 p3,p4,p5,p6
      real*8 p7,p8,p9,p10
      real*8 p11,p12,p13
      real*8 p14,p15,p16
      real*8 p17,p18,p19
      real*8 p20,p21,p22
      parameter (pa=3.97886080735226000d0)
      parameter (p0=2.75374741597376782d-1)
      parameter (p1=4.90165080585318424d-1)
      parameter (p2=7.74368199119538609d-1)
      parameter (p3=1.07925515155856677d0)
      parameter (p4=1.31314653831023098d0)
      parameter (p5=1.37040217682338167d0)
      parameter (p6=1.18902982909273333d0)
      parameter (p7=8.05276408752910567d-1)
      parameter (p8=3.57524274449531043d-1)
      parameter (p9=1.66207924969367356d-2)
      parameter (p10=-1.19463959964325415d-1)
      parameter (p11=-8.38864557023001992d-2)
      parameter (p12=2.49367200053503304d-3)
      parameter (p13=3.90976845588484035d-2)
      parameter (p14=1.61315329733252248d-2)
      parameter (p15=-1.33823644533460069d-2)
      parameter (p16=-1.27223813782122755d-2)
      parameter (p17=3.83335126264887303d-3)
      parameter (p18=7.73672528313526668d-3)
      parameter (p19=-8.70779635317295828d-4)
      parameter (p20=-3.96385097360513500d-3)
      parameter (p21=1.19314022838340944d-4)
      parameter (p22=1.27109764952614092d-3)
      real*8 erfc,x
      real*8 t,u,y
c
c
c     get an erfc value via rational function approximation
c
      t = pa / (pa+abs(x))
      u = t - 0.5d0
      y = (((((((((p22*u+p21)*u+p20)*u+p19)*u+p18)*u+p17)
     &       *u+p16)*u+p15)*u+p14)*u+p13)*u+p12
      y = ((((((((((((y*u+p11)*u+p10)*u+p9)*u+p8)*u+p7)*u+p6)
     &       *u+p5)*u+p4)*u+p3)*u+p2)*u+p1)*u+p0)*t*exp(-x*x)
      if (x .lt. 0.0d0)  y = 2.0d0 - y
      erfc = y
      return
      end
c
c
c     ################################################################
c     ##                                                            ##
c     ##  function erfinv  --  evaluate the inverse error function  ##
c     ##                                                            ##
c     ################################################################
c
c
c     "erfinv" evaluates the inverse error function for an argument
c     in the range (-1,1) via a rational function approximation
c
c     literature reference:
c
c     G. Marsaglia, "Evaluating the Normal Distribution", Journal
c     of Statistical Software, 11, 4 (2004)
c
c     adapted from an original algorithm and code by T. Oouda, and
c     available from http://www.kurims.kyoto-u.ac.jp/~ooura/
c
c
      function erfinv (x)
      implicit none
      include 'iounit.i'
      real*8 pa,pb,p0,p1,p2
      real*8 p3,p4,p5,p6,p7
      real*8 p8,p9,p10,p11
      real*8 p12,p13,p14,p15
      real*8 p16,p17,p18,p19
      real*8 p20,p21,p22
      real*8 qa,qb,qc,qd
      real*8 q0,q1,q2,q3,q4
      parameter (pa=3.97886080735226000d0)
      parameter (pb=1.20782237635245222d-1)
      parameter (p0=2.44044510593190935d-1)
      parameter (p1=4.34397492331430115d-1)
      parameter (p2=6.86265948274097816d-1)
      parameter (p3=9.56464974744799006d-1)
      parameter (p4=1.16374581931560831d0)
      parameter (p5=1.21448730779995237d0)
      parameter (p6=1.05375024970847138d0)
      parameter (p7=7.13657635868730364d-1)
      parameter (p8=3.16847638520135944d-1)
      parameter (p9=1.47297938331485121d-2)
      parameter (p10=-1.05872177941595488d-1)
      parameter (p11=-7.43424357241784861d-2)
      parameter (p12=2.20995927012179067d-3)
      parameter (p13=3.46494207789099922d-2)
      parameter (p14=1.42961988697898018d-2)
      parameter (p15=-1.18598117047771104d-2)
      parameter (p16=-1.12749169332504870d-2)
      parameter (p17=3.39721910367775861d-3)
      parameter (p18=6.85649426074558612d-3)
      parameter (p19=-7.71708358954120939d-4)
      parameter (p20=-3.51287146129100025d-3)
      parameter (p21=1.05739299623423047d-4)
      parameter (p22=1.12648096188977922d-3)
      parameter (qa=9.16461398268964d-1)
      parameter (qb=2.31729200323405d-1)
      parameter (qc=4.88826640273108d-1)
      parameter (qd=1.24610454613712d-1)
      parameter (q0=4.99999303439796d-1)
      parameter (q1=1.16065025341614d-1)
      parameter (q2=1.50689047360223d-1)
      parameter (q3=2.69999308670029d-1)
      parameter (q4=-7.28846765585675d-2)
      real*8 erfinv,x
      real*8 z,y,w,u,s,t
c
c
c     check the validity of the input argument (this is slow)
c
c     if (abs(x) .ge. 1.0d0) then
c        write (iout,10)
c  10    format (/,' ERFINV  --  Illegal Argument to Inverse',
c    &              ' Error Function')
c        call fatal
c     end if
c
c     get inverse erf value via rational function approximation
c
      z = 1.0d0 - x
      if (x .lt. 0.0d0)  z = 1.0d0 + x
      w = qa - log(z)
      u = sqrt(w)
      s = (qc+log(u)) / w
      t = 1.0d0 / (u+qb)
      y = u*(1.0d0-s*(0.5d0+s*qd)) - ((((q4*t+q3)*t+q2)*t+q1)*t+q0)*t
      t = pa / (pa+y)
      u = t - 0.5d0
      s = (((((((((p22*u+p21)*u+p20)*u+p19)*u+p18)*u+p17)*u+p16)
     &       *u+p15)*u+p14)*u+p13)*u+p12
      s = ((((((((((((s*u+p11)*u+p10)*u+p9)*u+p8)*u+p7)*u+p6)*u+p5)
     &       *u+p4)*u+p3)*u+p2)*u+p1)*u+p0)*t - z*exp(y*y-pb)
      y = y + s*(1.0d0+y*s)
      if (x .lt. 0.0d0)  y = -y
      erfinv = y
      return
      end
