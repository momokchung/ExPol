c
c
c     ###################################################
c     ##  COPYRIGHT (C)  1990  by  Jay William Ponder  ##
c     ##              All Rights Reserved              ##
c     ###################################################
c
c     ################################################################
c     ##                                                            ##
c     ##  subroutine image  --  pairwise distance of minimum image  ##
c     ##                                                            ##
c     ################################################################
c
c
c     "image" takes the components of pairwise distance between
c     two points in the same or neighboring periodic boxes and
c     converts to the components of the minimum image distance
c
c
      subroutine image (xr,yr,zr,i)
      implicit none
      include 'sizes.i'
      include 'boxes.i'
      include 'cell.i'
      integer i
      real*8 xr,yr,zr
      real*8 xf,yf,zf
      real*8 xsize,ysize,zsize
      real*8 xsize2,ysize2,zsize2
      real*8 xmove,ymove,zmove
c
c
c     set dimensions for either single box or replicated cell
c
      if (i .ge. 0) then
         xsize = xcell
         ysize = ycell
         zsize = zcell
         xsize2 = xcell2
         ysize2 = ycell2
         zsize2 = zcell2
      else
         xsize = xbox
         ysize = ybox
         zsize = zbox
         xsize2 = xbox2
         ysize2 = ybox2
         zsize2 = zbox2
      end if
c
c     compute the distance to translate along each cell axis
c
      if (i .le. 0) then
         xmove = 0.0d0
         ymove = 0.0d0
         zmove = 0.0d0
      else
         xmove = icell(1,i) * xbox
         ymove = icell(2,i) * ybox
         zmove = icell(3,i) * zbox
      end if
c
c     for orthogonal lattice, find the desired image directly
c
      if (orthogonal) then
         xr = xr + xmove
         dowhile (xr .gt. xsize2)
            xr = xr - xsize
          end do
         dowhile (xr .lt. -xsize2)
            xr = xr + xsize
         end do
         yr = yr + ymove
         dowhile (yr .gt. ysize2)
            yr = yr - ysize
         end do
         dowhile (yr .lt. -ysize2)
            yr = yr + ysize
         end do
         zr = zr + zmove
         dowhile (zr .gt. zsize2)
            zr = zr - zsize
         end do
         dowhile (zr .lt. -zsize2)
            zr = zr + zsize
         end do
c
c     for monoclinic lattice, convert "xr" and "zr" to
c     fractional coordinates, find desired image and then
c     translate fractional coordinates back to Cartesian
c
      else if (monoclinic) then
         zf = zr / beta_sin
         xf = xr - zf*beta_cos
         xf = xf + xmove
         dowhile (xf .gt. xsize2)
            xf = xf - xsize
         end do
         dowhile (xf .lt. -xsize2)
            xf = xf + xsize
         end do
         yr = yr + ymove
         dowhile (yr .gt. ysize2)
            yr = yr - ysize
         end do
         dowhile (yr .lt. -ysize2)
            yr = yr + ysize
         end do
         zf = zf + zmove
         dowhile (zf .gt. zsize2)
            zf = zf - zsize
         end do
         dowhile (zf .lt. -zsize2)
            zf = zf + zsize
         end do
         xr = xf + zf*beta_cos
         zr = zf * beta_sin
c
c     for triclinic lattice, convert pairwise components to
c     fractional coordinates, find desired image and then
c     translate fractional coordinates back to Cartesian
c
      else if (triclinic) then
         zf = zr / gamma_term
         yf = (yr - zf*beta_term) / gamma_sin
         xf = xr - yf*gamma_cos - zf*beta_cos
         xf = xf + xmove
         dowhile (xf .gt. xsize2)
            xf = xf - xsize
         end do
         dowhile (xf .lt. -xsize2)
            xf = xf + xsize
         end do
         yf = yf + ymove
         dowhile (yf .gt. ysize2)
            yf = yf - ysize
         end do
         dowhile (yf .lt. -ysize2)
            yf = yf + ysize
         end do
         zf = zf + zmove
         dowhile (zf .gt. zsize2)
            zf = zf - zsize
         end do
         dowhile (zf .lt. -zsize2)
            zf = zf + zsize
         end do
         xr = xf + yf*gamma_cos + zf*beta_cos
         yr = yf*gamma_sin + zf*beta_term
         zr = zf * gamma_term
c
c     for truncated octahedron, use orthogonal box equations,
c     then perform extra tests to remove corner pieces
c
      else if (octahedron) then
         dowhile (xr .gt. xbox2)
            xr = xr - xbox
         end do
         dowhile (xr .lt. -xbox2)
            xr = xr + xbox
         end do
         dowhile (yr .gt. ybox2)
            yr = yr - ybox
         end do
         dowhile (yr .lt. -ybox2)
            yr = yr + ybox
         end do
         dowhile (zr .gt. zbox2)
            zr = zr - zbox
         end do
         dowhile (zr .lt. -zbox2)
            zr = zr + zbox
         end do
         if (abs(xr)+abs(yr)+abs(zr) .gt. box34) then
            xr = xr - sign(xbox2,xr)
            yr = yr - sign(ybox2,yr)
            zr = zr - sign(zbox2,zr)
         end if
      end if
      return
      end
c
c
c     ###################################################
c     ##  COPYRIGHT (C)  1990  by  Jay William Ponder  ##
c     ##              All Rights Reserved              ##
c     ###################################################
c
c     ################################################################
c     ##                                                            ##
c     ##  subroutine image  --  pairwise distance of minimum image  ##
c     ##                                                            ##
c     ################################################################
c
c
c     "image" takes the components of pairwise distance between
c     two points in the same or neighboring periodic boxes and
c     converts to the components of the minimum image distance
c
c
      subroutine image (xr,yr,zr,i)
      implicit none
      include 'sizes.i'
      include 'boxes.i'
      include 'cell.i'
      integer i
      real*8 xr,yr,zr
      real*8 xf,yf,zf
      real*8 xsize,ysize,zsize
      real*8 xrecip,yrecip,zrecip
      real*8 xmove,ymove,zmove
c
c
c     set dimensions for either single box or replicated cell
c
      if (i .ge. 0) then
         xsize = xcell
         ysize = ycell
         zsize = zcell
         xrecip = xcelli
         yrecip = ycelli
         zrecip = zcelli
      else
         xsize = xbox
         ysize = ybox
         zsize = zbox
         xrecip = xboxi
         yrecip = yboxi
         zrecip = zboxi
      end if
c
c     compute the distance to translate along each cell axis
c
      if (i .le. 0) then
         xmove = 0.0d0
         ymove = 0.0d0
         zmove = 0.0d0
      else
         xmove = icell(1,i) * xbox
         ymove = icell(2,i) * ybox
         zmove = icell(3,i) * zbox
      end if
c
c     for orthogonal lattice, find the desired image directly
c
      if (orthogonal) then
         xr = xr + xmove
         xr = xr - xsize*nint(xr*xrecip)
         yr = yr + ymove
         yr = yr - ysize*nint(yr*yrecip)
         zr = zr + zmove
         zr = zr - zsize*nint(zr*zrecip)
c
c     for monoclinic lattice, convert "xr" and "zr" to
c     fractional coordinates, find desired image and then
c     translate fractional coordinates back to Cartesian
c
      else if (monoclinic) then
         zf = zr / beta_sin
         xf = xr - zf*beta_cos
         xf = xf + xmove
         xf = xf - xsize*nint(xf*xrecip)
         yr = yr + ymove
         yr = yr - ysize*nint(yr*yrecip)
         zf = zf + zmove
         zf = zf - zsize*nint(zf*zrecip)
         xr = xf + zf*beta_cos
         zr = zf * beta_sin
c
c     for triclinic lattice, convert pairwise components to
c     fractional coordinates, find desired image and then
c     translate fractional coordinates back to Cartesian
c
      else if (triclinic) then
         zf = zr / gamma_term
         yf = (yr - zf*beta_term) / gamma_sin
         xf = xr - yf*gamma_cos - zf*beta_cos
         xf = xf + xmove
         xf = xf - xsize*nint(xf*xrecip)
         yf = yf + ymove
         yf = yf - ysize*nint(yf*yrecip)
         zf = zf + zmove
         zf = zf - zsize*nint(zf*zrecip)
         xr = xf + yf*gamma_cos + zf*beta_cos
         yr = yf*gamma_sin + zf*beta_term
         zr = zf * gamma_term
c
c     for truncated octahedron, use orthogonal box equations,
c     then perform extra tests to remove corner pieces
c
      else if (octahedron) then
         xr = xr - xbox*nint(xr*xboxi)
         yr = yr - ybox*nint(yr*yboxi)
         zr = zr - zbox*nint(zr*zboxi)
         if (abs(xr)+abs(yr)+abs(zr) .gt. box34) then
            xr = xr - sign(xbox2,xr)
            yr = yr - sign(ybox2,yr)
            zr = zr - sign(zbox2,zr)
         end if
      end if
      return
      end
